//! Solution for https://leetcode.com/problems/minimize-malware-spread-ii
//! 928. Minimize Malware Spread II

struct DSU {
    p: Vec<i32>,
}

impl DSU {
    fn new(n: usize) -> Self {
        Self { p: vec![-1; n] }
    }

    fn get(&mut self, x: usize) -> usize {
        if self.p[x] < 0 {
            x
        } else {
            self.p[x] = self.get(self.p[x] as usize) as i32;
            self.p[x] as usize
        }
    }

    fn merge(&mut self, mut x: usize, mut y: usize) -> bool {
        x = self.get(x);
        y = self.get(y);
        if x == y {
            return false;
        }
        if -self.p[x] < -self.p[y] {
            std::mem::swap(&mut x, &mut y);
        }
        self.p[x] += self.p[y];
        self.p[y] = x as i32;
        true
    }

    fn comp_size(&mut self, x: usize) -> usize {
        let root = self.get(x);
        (-self.p[root]) as usize
    }
}

impl Solution {
    pub fn min_malware_spread(graph: Vec<Vec<i32>>, mut initial: Vec<i32>) -> i32 {
        let n = graph.len();

        initial.sort();
        let mut min_spread = n + 1;
        let mut min_i = 0;
        for &i in &initial {
            let i = i as usize;
            let mut dsu = DSU::new(n);
            for ii in 0..n {
                for jj in 0..n {
                    if ii != i && jj != i && graph[ii][jj] == 1 {
                        dsu.merge(ii, jj);
                    }
                }
            }
            let mut cur_spread = 0;
            let mut infected = vec![false; n];
            for &ii in &initial {
                let ii = ii as usize;
                if ii == i {
                    continue;
                }
                let root = dsu.get(ii);
                if !infected[root] {
                    infected[root] = true;
                    cur_spread += dsu.comp_size(root);
                }
            }
            if cur_spread < min_spread {
                min_spread = cur_spread;
                min_i = i;
            }
        }
        min_i as i32
    }
}

// << ---------------- Code below here is only for local use ---------------- >>

pub struct Solution;

#[cfg(test)]
mod tests {
    use super::*;

    use rstest::rstest;

    #[rstest]
    #[case(vec![vec![1,1,0],vec![1,1,0],vec![0,0,1]], vec![0,1], 0)]
    #[case(vec![vec![1,1,0],vec![1,1,1],vec![0,1,1]], vec![0,1], 1)]
    #[case(vec![vec![1,1,0,0],vec![1,1,1,0],vec![0,1,1,1],vec![0,0,1,1]], vec![0,1], 1)]
    fn case(#[case] graph: Vec<Vec<i32>>, #[case] initial: Vec<i32>, #[case] expected: i32) {
        let actual = Solution::min_malware_spread(graph, initial);
        assert_eq!(actual, expected);
    }
}
